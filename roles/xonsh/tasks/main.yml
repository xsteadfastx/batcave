---
- include_vars : "{{ item }}"
  with_first_found:
    - "../vars/{{ ansible_os_family }}.yml"

- name: install deps
  package:
    name={{ item }}
    state=present
  become: yes
  with_items:
    - bash
    - grep
    - sed
    - "{{ pip3_package_name }}"
    - "{{ python3_package_name }}"

- name: set bash as default shell
  user:
    name={{ ansible_env.USER }}
    shell=/bin/bash
  become: yes
  when: ansible_os_family == 'Debian'

- name: set bash as default shell
  replace:
    dest=/etc/passwd
    regexp='(^{{ ansible_user_id }}:.+:.+:.+:.+:.+:).+$'
    replace='\1/bin/bash'
  become: yes
  when: ansible_os_family == 'Alpine'

- name: get installed python3 version
  shell: python3 --version 2>&1
  register: python3_version

- set_fact:
    python3_compatible: "{% if '3.4' in python3_version.stdout or '3.5' in python3_version.stdout %}yes{% else %}no{% endif %}"

- name: install python packages
  pip:
    name={{ item }}
    executable=pip3
    state=latest
  become: yes
  with_items:
    - prompt_toolkit
    - pygments
    - xonsh
    - xonsh-apt_tabcomplete
    - xonsh-autoxsh
    - xonsh-docker_tabcomplete
    - xonsh-vox_tabcomplete
  when: python3_compatible

- name: link files
  file:
    src={{ batcave_path }}/roles/xonsh/files/{{ item.src }}
    dest={{ item.dest }}
    state=link
  with_items:
    - { 'src': 'xonshrc', 'dest': '~/.xonshrc' }
  when: python3_compatible

- name: set xonsh as default shell
  user:
    name={{ ansible_env.USER }}
    shell=/usr/local/bin/xonsh
  become: yes
  when: (ansible_os_family == 'Debian') and (python3_compatible)

- name: set xonsh as default shell
  replace:
    dest=/etc/passwd
    regexp='(^{{ ansible_user_id }}:.+:.+:.+:.+:.+:).+$'
    replace='\1/usr/bin/xonsh'
  become: yes
  when: (ansible_os_family == 'Alpine') and (python3_compatible)

- name: get passwd body
  shell: cat /etc/passwd | grep {{ ansible_user_id }} | sed "s/.*:\(.*:.*:.*:.*:.*\):.*/\1/"
  register: passwd_body
  when: python3_compatible

- name: create passwd backup alias
  lineinfile:
    dest=/etc/passwd
    line='{{ ansible_user_id }}bash:{{ passwd_body.stdout_lines[0] }}:/bin/bash'
    insertafter='^{{ ansible_user_id }}'
    state=present
    backup=yes
  become: yes
  when: (python3_compatible) and ('bash' not in ansible_user_id)

- name: clean bashrc
  lineinfile:
    dest=~/.bashrc
    line={{ item }}
    state=absent
  with_items:
    - '# activate xonsh'
    - '[ -f /usr/local/bin/xonsh ] && exec /usr/local/bin/xonsh -l'
    - '[ -f /usr/bin/xonsh ] && exec /usr/bin/xonsh -l'
  when: python3_compatible
