# vim: set ft=python:

import base64
import hashlib
import os
import re
import shutil
from contextlib import contextmanager

# ENVIRONMENT VARIABLES ############

$CASE_SENSITIVE_COMPLETIONS = False
$EDITOR = 'vim'
$LC_UID = re.findall(r'\d{1,4}', $(id).split(' ')[0])[0]
$SHELL_TYPE = 'best'
$SUPPRESS_BRANCH_TIMEOUT_MESSAGE = True
$VC_BRANCH_TIMEOUT = 5
$VIRTUALENV_HOME = os.path.join(os.path.expanduser('~'), '.local/share/virtualenvs')
$XONSH_COLOR_STYLE = 'solarizeddark'

# add bash completions
$BASH_COMPLETIONS.append($HOME + '/.linuxbrew/etc/bash_completion.d')


# FUNCTIONS ##############################

@contextmanager
def _recover_path():
    """Contextmanager to recover PATH after running alias."""
    old_path = $PATH[:]
    yield
    $PATH = old_path


def _alias_tmux_gc(args, stdin=None):
    tmux list-sessions | grep -v attached | cut -d: -f1 |  xargs -t -n1 tmux kill-session -t


def _alias_mosh(args, stdin=None):
    """A function to use as alias to get mosh running.

    There is a strange problem with mosh and xonsh. I have to set $SHELL to
    /bin/dash before running it. It should work with this little hack.
    """
    os.environ['SHELL'] = '/bin/dash'
    args.insert(0, 'mosh')
    cmd = ' '.join(args)
    os.system(cmd)


def _alias_ssh(args, stdin=None):
    os.environ['TERM'] = 'xterm'
    args.insert(0, 'ssh')
    cmd = ' '.join(args)
    os.system(cmd)


def _alias_pipenv_shell(args, stdin=None):
    if args[0] == 'shell':
        print('WARNING: using own xonsh alias function instead of pipenv shell')
        name = $PWD.split(os.sep)[-1]
        sanitized = re.sub(r'[ $`!*@"\\\r\n\t]', '_', name)[0:42]
        hash = hashlib.sha256(os.path.join($PWD, 'Pipfile').encode()).digest()[:6]
        encoded_hash = base64.urlsafe_b64encode(hash).decode()
        venv_name = sanitized + '-' + encoded_hash
        for venv in $(ls $VIRTUALENV_HOME).splitlines():
            if venv == venv_name:
                vox activate @(venv)
    else:
        ~/.local/bin/pipenv @(args)


def _alias_brew(args, stdin=None):
    with _recover_path():
        paths = ['~/.pyenv/bin', '~/.pyenv/shims', '~/.local/bin']
        for path in paths:
            full_path = os.path.expanduser(path)
            while full_path in $PATH:
                $PATH.remove(full_path)

        ~/.linuxbrew/bin/brew @(args)

# ALIASES ################################

aliases['exec'] = aliases['xexec']
aliases['ll'] = 'ls -la'
aliases['tmux'] = 'tmux -2'
aliases['tmux-gc'] = _alias_tmux_gc
aliases['vim'] = 'nvim'
aliases['mosh'] = _alias_mosh
aliases['ssh'] = _alias_ssh
aliases['pipenv'] = _alias_pipenv_shell
aliases['brew'] = _alias_brew


# PATH ###################################

$PATH[0:0] = [
    $HOME + '/.local/bin',
    $HOME + '/.pyenv/bin',
    $HOME + '/.pyenv/shims',
    $HOME + '/.linuxbrew/sbin',
    $HOME + '/.linuxbrew/bin',
]


# XONTRIB ################################

xontrib load vox
xontrib load vox_tabcomplete
xontrib load powerline

if shutil.which('apt-get'):
    xontrib load apt_tabcomplete
