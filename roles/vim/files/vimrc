" ---------------------------------------
" GENERAL
" ---------------------------------------

set nocompatible
filetype off
set enc=utf-8
set fenc=utf-8
set fileencoding=utf-8
filetype plugin indent on


" ---------------------------------------
" PLUGINS
" ---------------------------------------

call plug#begin('~/.vim/plugged')
Plug 'gmarik/Vundle.vim'
Plug 'tpope/vim-fugitive'
Plug 'davidhalter/jedi-vim'
Plug 'ervandew/supertab'
Plug 'klen/python-mode'
Plug 'scrooloose/syntastic'
Plug 'altercation/vim-colors-solarized'
Plug 'vim-airline/vim-airline'
Plug 'vim-airline/vim-airline-themes'
Plug 'scrooloose/nerdtree', { 'on': 'NERDTreeToggle' }
Plug 'godlygeek/tabular'
Plug 'plasticboy/vim-markdown'
"Plug 'freitass/todo.txt-vim'
Plug 'tpope/vim-git'
Plug 'junegunn/goyo.vim'
Plug 'reedes/vim-pencil'
Plug 'vim-scripts/indentpython.vim'
Plug 'nvie/vim-flake8'
"Plug 'Shougo/neocomplete.vim'
Plug 'Rykka/riv.vim'
Plug 'jiangmiao/auto-pairs'
Plug 'ntpeters/vim-better-whitespace'
Plug 'alfredodeza/pytest.vim'
Plug 'airblade/vim-gitgutter'
call plug#end()


" ---------------------------------------
" UI
" ---------------------------------------

set number
set backspace=2
set laststatus=2
set nofoldenable
set colorcolumn=79
syntax on
"autocmd ColorScheme * highlight ExtraWhitespace ctermbg=red guibg=red
au InsertLeave * match ExtraWhitespace /\s\+$/
set background=dark
colorscheme solarized
let python_highlight_all=1


" ---------------------------------------
" TEXT FORMAT
" ---------------------------------------

set autoindent
set smartindent
set nowrap
set expandtab
set nosmarttab

" automatically remove trail. whitespace at write
au BufWritePre <buffer> StripWhitespace


" ---------------------------------------
" KEYMAPS
" ---------------------------------------

let mapleader = ","
let maplocalleader = "\\"
"nnoremap <F9> to :!python %<CR> " run python
map <C-n> :NERDTreeToggle<CR> " open nerdtree
"vnoremap <Leader>s :sort<CR> " sort marked text
vnoremap < <gv " better indentation
vnoremap > >gv " better indentation
nmap <silent><Leader>p <Esc>:Pytest project<CR>
nmap <silent><Leader>f <Esc>:Pytest function<CR>


" ---------------------------------------
" PYTHON-MODE
" ---------------------------------------

let g:pymode_rope_lookup_project = 0
let g:pymode_rope = 0
let g:pymode_lint_ignore = "C901"


" ---------------------------------------
" PENCIL
" ---------------------------------------

let g:pencil#wrapModeDefault = 'soft'


" ---------------------------------------
" NEOVIM
" ---------------------------------------

if has('nvim')
    runtime! plugin/python_setup.vim
endif


" ---------------------------------------
" FILE TYPES
" ---------------------------------------

augroup yaml
  autocmd!
  au BufRead,BufNewFile *yml,*yaml set filetype=yaml
  au FileType yaml setl tabstop=2 expandtab shiftwidth=2 softtabstop=2
augroup end

augroup pencil
    autocmd!
    au BufRead,BufNewFile *.markdown,*.md set filetype=markdown
    au FileType markdown,mkd,rst call pencil#init()
    au FileType markdown,mkd,rst setl spell spelllang=de
augroup end
